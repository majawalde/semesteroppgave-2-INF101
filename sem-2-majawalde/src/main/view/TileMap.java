package main.view;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.*;


/**
 * This class creates a tile map.
 */
public class TileMap extends JPanel {

    GamePanel gamePanel;
    private final BufferedImage[] tiles;
    public final int[][] map;

    /**
     * Constructor
     * generates the tile map
     * @param gamePanel
     */
    public TileMap(GamePanel gamePanel) {
        this.gamePanel = gamePanel;
        tiles = new BufferedImage[10];
        try {
            tiles[0] = ImageIO.read(new File("res/tiles/grass.png"));
            tiles[1] = ImageIO.read(new File("res/tiles/terrain2.png"));
            tiles[2] = ImageIO.read(new File("res/tiles/terrain1.png"));
            tiles[3] = ImageIO.read(new File("res/tiles/water.png"));
            tiles[4] = ImageIO.read(new File("res/tiles/bush.png"));
            tiles[5] = ImageIO.read(new File("res/tiles/whiteflower.png"));
            tiles[6] = ImageIO.read(new File("res/tiles/purpleflower.png"));
            tiles[7] = ImageIO.read(new File("res/tiles/blueflower.png"));

        } catch (Exception e) {
            e.printStackTrace();
        }

        map = new int[][]{
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 5, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 5, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 0, 0, 0, 0, 0, 0, 0, 2},
                {0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 5, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 5, 0, 0, 0, 0, 0, 0, 2, 2},
                {0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 0, 5, 3, 2, 3, 7, 7, 2, 7, 7, 3, 2, 3, 5, 0, 0, 0, 0, 0, 2, 2, 2},
                {0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 0, 5, 3, 2, 3, 7, 7, 2, 7, 7, 3, 2, 3, 5, 0, 0, 0, 0, 2, 2, 2, 0},
                {0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0},
                {0, 4, 0, 2, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 5, 3, 2, 3, 7, 7, 2, 7, 7, 3, 2, 3, 5, 0, 0, 2, 2, 2, 0, 0, 0},
                {0, 4, 0, 0, 2, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 5, 3, 2, 3, 7, 7, 2, 7, 7, 3, 2, 3, 5, 0, 2, 2, 2, 0, 0, 0, 0},
                {0, 4, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 5, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 5, 0, 2, 2, 0, 0, 0, 0, 0},
                {0, 4, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 2, 2, 0, 5, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 0, 2, 2, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4, 4, 4, 4, 0, 2, 2, 0, 5, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 5, 0, 2, 2, 0, 0, 0, 0, 0},
                {0, 0, 7, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 4, 0, 4, 2, 2, 0, 5, 5, 5, 5, 5, 3, 2, 3, 5, 5, 5, 5, 5, 0, 2, 2, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 1, 0, 0, 5, 3, 2, 3, 5, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0},
                {0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 2, 2, 0, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 5, 3, 2, 3, 5, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0},
                {0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0},
                {0, 7, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 6, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 5, 0, 0, 5, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 0, 0, 5, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 2, 0, 0, 7, 7, 7, 0, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 0, 7, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 2, 0, 0, 0, 7, 7, 0, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {6, 5, 0, 0, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 7, 5, 5, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 2, 0, 1, 0, 0, 0, 0, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 0, 7, 7, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {6, 0, 0, 6, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 5, 0, 7, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 2, 2, 0, 0, 0, 0, 0, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {5, 0, 7, 0, 0, 6, 0, 0, 3, 3, 3, 3, 6, 6, 6, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 6, 0, 5, 7, 0, 0, 0, 0, 3, 3, 6, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 7, 0, 6, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 0, 0, 5, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 0, 2, 0, 4, 4, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 0, 7, 0, 0, 6, 0, 0, 0, 3, 3, 0, 0, 0, 0, 4, 5, 5, 5, 5, 2, 5, 5, 5, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 6, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 4, 5, 5, 5, 2, 2, 2, 5, 5, 4, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0},
                {0, 0, 0, 0, 6, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 4, 5, 5, 5, 2, 2, 2, 5, 5, 4, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 6, 0, 6, 0, 0, 0, 3, 3, 3, 0, 0, 0, 4, 5, 5, 5, 2, 2, 2, 5, 5, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 4, 4, 5, 5, 5, 2, 5, 5, 5, 4, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 3, 3, 3, 1, 0, 0},
                {0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 4, 5, 5, 2, 5, 5, 5, 4, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 3, 3, 3, 1, 0, 0},
                {6, 0, 0, 6, 0, 6, 0, 6, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 4, 5, 2, 2, 5, 5, 4, 0, 2, 2, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 2, 2, 0, 1, 3, 3, 3, 1, 0, 0},
                {0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0, 3, 3, 3, 0, 4, 4, 4, 2, 4, 4, 4, 0, 2, 2, 0, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 2, 2, 0, 1, 1, 3, 1, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 7, 6, 5, 5, 5, 5, 5, 5, 6, 7, 0, 2, 2, 0, 0, 0, 3, 0, 0, 0, 0},
                {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 7, 6, 5, 3, 3, 3, 3, 5, 6, 7, 0, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2},
                {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 7, 6, 5, 3, 3, 3, 3, 5, 6, 7, 0, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 7, 6, 5, 5, 5, 5, 5, 5, 6, 7, 0, 2, 2, 0, 0, 0, 3, 0, 0, 0, 0},
                {0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 4, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 2, 2, 0, 1, 1, 3, 1, 1, 0, 4},
                {0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 4, 0, 1, 3, 3, 3, 1, 0, 2, 2, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 2, 2, 0, 1, 3, 3, 3, 1, 0, 4},
                {0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 4, 0, 1, 3, 3, 3, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 3, 3, 3, 1, 0, 4},
                {0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 4, 0, 1, 3, 3, 3, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 3, 3, 3, 1, 0, 4},
                {0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 4, 0, 1, 3, 3, 3, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 3, 3, 3, 1, 0, 4},
                {0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 4, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 4},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},

        };
    }

    /**
     * Returns the preferred size of the map.
     * @return the preferred size of the map
     */
    @Override
    public Dimension getPreferredSize() {
        return new Dimension(map[0].length * gamePanel.TILE_SIZE, map.length * gamePanel.TILE_SIZE);
    }

    /**
     * Paints the map.
     * @param g the graphics object
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        int mapCol = 0;
        int mapRow = 0;

        /*
         * @author RyiSnow on Youtube.
         */
        while(mapCol < gamePanel.mapCol && mapRow < gamePanel.mapRow) {
            int tile = map[mapRow][mapCol];

            int mapX = mapCol * gamePanel.TILE_SIZE;
            int mapY = mapRow * gamePanel.TILE_SIZE;
            int screenX = mapX - gamePanel.player.mapX + gamePanel.player.screenX;
            int screenY = mapY - gamePanel.player.mapY + gamePanel.player.screenY;

            if (mapX + gamePanel.TILE_SIZE > gamePanel.player.mapX - gamePanel.player.mapX &&
                mapX - gamePanel.TILE_SIZE < gamePanel.player.mapX + gamePanel.player.screenX &&
                mapY + gamePanel.TILE_SIZE > gamePanel.player.mapY - gamePanel.player.screenY &&
                mapY - gamePanel.TILE_SIZE < gamePanel.player.mapY + gamePanel.player.screenY) {

                g2d.drawImage(tiles[tile], screenX, screenY, gamePanel.TILE_SIZE, gamePanel.TILE_SIZE, null);
            }

            mapCol++;

            if(mapCol == gamePanel.mapCol) {
                mapCol = 0;
                mapRow++;
            }
        }
    }
}
